// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}


model Role {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())

  users User[]
}

model User {
  id        String         @id @default(uuid())
  email     String         @unique
  password  String?
  isActive  Boolean        @default(false)
  invitedBy String?
  roleId    String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  Profile   MemberProfile?
  invites   Invite[]

  role                   Role           @relation(fields: [roleId], references: [id])
  confirmedContributions Contribution[] @relation("ConfirmedBy")
}

model MemberProfile {
  id                     String         @id @default(uuid())
  userId                 String         @unique
  monthlyShareCommitment Int
  phoneNumber            String?
  joinDate               DateTime
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt
  contributions          Contribution[]

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([joinDate])
}

model ShareSetting {
  id         String   @id @default(uuid())
  sharePrice Decimal  @db.Decimal(10, 2)
  activeFrom DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([activeFrom])
}

model Invite {
  id         String    @id @default(uuid())
  userId     String
  token      String    @unique
  expiresAt  DateTime
  acceptedAt DateTime?
  createdAt  DateTime  @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([expiresAt])
}

model Contribution {
  id          String        @id @default(uuid())
  profileId   String
  month       DateTime
  amountPaid  Decimal       @db.Decimal(10, 2)
  proofUrl    String?
  confirmedBy String?
  status      PaymentStatus @default(pending)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  profile         MemberProfile @relation(fields: [profileId], references: [id])
  confirmedByUser User?         @relation("ConfirmedBy", fields: [confirmedBy], references: [id])

  @@index([profileId])
  @@index([month])
  @@index([status])
  @@index([confirmedBy])
}

enum PaymentStatus {
  pending
  confirmed
  rejected
}
